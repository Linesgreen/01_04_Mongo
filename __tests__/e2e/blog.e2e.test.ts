// noinspection AnonymousFunctionJS,MagicNumberJS

import request from 'supertest'
import {BlogCreateModel} from "../../src/types/blogs/input";
import {OutputItemsBlogType} from "../../src/types/blogs/output";
import {blogTestManager} from "../utils/blogTestManager";
import {app, RouterPaths} from "../../src/setting";


describe('/blogs', () => {
    // –û—á–∏—â–∞–µ–º –ë–î
    beforeAll(async () => {
        await request(app)
            .delete('/testing/all-data')
    });

    const basicPag = {
        "pagesCount": 0,
        "page": 1,
        "pageSize": 10,
        "totalCount": 0,
        "items": []
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –ø—É—Å—Ç–∞—è
    it('should return 200 and empty []', async () => {
        await request(app)
            .get(RouterPaths.blogs)
            .expect(200, basicPag)
    });

    //–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    let createdBlog: OutputItemsBlogType;
    let secondCreatedBlog: OutputItemsBlogType;
    // –±–∞–∑–≤–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è

    const blogData: BlogCreateModel = {
        "name": "Felix",
        "description": "Secret",
        "websiteUrl": "https://iaWvPbi4nnt1cAej2P1InTA.XtfqLdbJEXn29s9xpDzU762y._qXDYoZFu-TSCTCLhfR.RyF-B3dMemIrQ.INbBcnB3u"
    };

    const wrongBlogData: BlogCreateModel = {
        "name": "SecretSecretSecretSecretSecretSecretSecretSecretSecretSecretSecret",
        "description": "",
        "websiteUrl": "htt://iaWvPbi4nnt1cAej2P1InTA.XtfqLdbJEXn29s9xpDzU762y._qXDYoZFu-TSCTCLhfR.RyF-B3dMemIrQ.INbBcnB3u"
    };


    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    it("should'nt create blogs with incorrect input data ", async () => {

        //–û—Ç—Å—ã–ª–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const createResponse = await blogTestManager.createBlog(wrongBlogData, 400);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorsMessage = createResponse.body;
        expect(errorsMessage).toEqual({
            errorsMessages: [
                {message: 'Incorrect websiteUrl', field: 'websiteUrl'},
                {message: 'Incorrect description', field: 'description'},
                {message: 'Incorrect name', field: 'name'}
            ]
        })

    });

    //–ù–µ –ø—Ä–æ—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    it("should'nt create blogs without login and pass ", async () => {
        await request(app)
            .post(RouterPaths.blogs)
            .auth('aaaa', 'qwert')
            .expect(401, "Unauthorized")
    });


    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    it("should CREATE blogs with correct input data ", async () => {
        const createResponse = await blogTestManager.createBlog(blogData, 201);
        //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–æ–≥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        createdBlog = createResponse.body;
        expect(createdBlog).toEqual({
            "id": expect.any(String),
            "name": "Felix",
            "description": "Secret",
            "websiteUrl": "https://iaWvPbi4nnt1cAej2P1InTA.XtfqLdbJEXn29s9xpDzU762y._qXDYoZFu-TSCTCLhfR.RyF-B3dMemIrQ.INbBcnB3u",
            "createdAt": expect.any(String),
            "isMembership": false
        });

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–ª–æ–≥
        await request(app)
            .get(RouterPaths.blogs)
            .expect(200, {
                ...basicPag,
                pagesCount: 1,
                totalCount: 1,
                items: [createdBlog]
            })
    });

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –±–ª–æ–≥
    it("should CREATE blogs with correct input data ", async () => {
        const createResponse = await blogTestManager.createBlog(blogData, 201);

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–æ–≥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        secondCreatedBlog = createResponse.body;
        expect(secondCreatedBlog).toEqual({
            "id": expect.any(String),
            "name": "Felix",
            "description": "Secret",
            "websiteUrl": "https://iaWvPbi4nnt1cAej2P1InTA.XtfqLdbJEXn29s9xpDzU762y._qXDYoZFu-TSCTCLhfR.RyF-B3dMemIrQ.INbBcnB3u",
            "createdAt": expect.any(String),
            "isMembership": false
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–π–¥–∏ —É –¥–≤—É—Ö –±–ª–æ–≥–æ–≤ —Ä–∞–∑–Ω—ã–µ
        expect(createdBlog.id).not.toEqual(secondCreatedBlog.id);

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –±–¥ —Ç–µ–ø–µ—Ä—å –¥–≤–∞ –±–ª–æ–≥–∞
        await request(app)
            .get(RouterPaths.blogs)
            .expect(200, {
                ...basicPag,
                pagesCount: 1,
                totalCount: 2,
                items: [secondCreatedBlog, createdBlog]
            })
    });

    //–ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å createdBlog c –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    it("should'nt UPDATE video with incorrect input data ", async () => {
        await request(app)
            .put(`${RouterPaths.blogs}/${encodeURIComponent(createdBlog.id)}`)
            .auth('admin', 'qwerty')
            .send(wrongBlogData)
            .expect(400, {
                errorsMessages: [
                    {message: 'Incorrect websiteUrl', field: 'websiteUrl'},
                    {message: 'Incorrect description', field: 'description'},
                    {message: 'Incorrect name', field: 'name'}
                ]
            });

        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –±–µ–∑ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        await request(app)
            .put(`${RouterPaths.blogs}/${encodeURIComponent(createdBlog.id)}`)
            .auth('adminn', 'qwertn')
            .send(wrongBlogData)
            .expect(401, 'Unauthorized');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–ª–æ–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        await request(app)
            .get(`${RouterPaths.blogs}/${encodeURIComponent(createdBlog.id)}`)
            .expect(200, createdBlog)
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ createdBlog
    it("should UPDATE blogs with correct input data ", async () => {
        await request(app)
            .put(`${RouterPaths.blogs}/${encodeURIComponent(createdBlog.id)}`)
            .auth('admin', 'qwerty')
            .send(blogData)
            .expect(204);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π –±–ª–æ–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è
        await request(app)
            .get(`${RouterPaths.blogs}/${encodeURIComponent(createdBlog.id)}`)
            .expect(200, {
                ...createdBlog,
                ...blogData
            });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π –±–ª–æ–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        await request(app)
            .get(`${RouterPaths.blogs}/${encodeURIComponent(secondCreatedBlog.id)}`)
            .expect(200, secondCreatedBlog);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–≤—ã–º –±–ª–æ–≥–æ–º
        createdBlog = {
            ...createdBlog,
            ...blogData
        }
    });

    // –£–¥–∞–ª—è–µ–º createdBlog
    it("should DELETE blogs with correct id ", async () => {
        await request(app)
            .delete(`${RouterPaths.blogs}/${encodeURIComponent(createdBlog.id)}`)
            .auth('admin', 'qwerty')
            .expect(204);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π –±–ª–æ–≥ –Ω–∞ –º–µ—Å—Ç–µ –∞ –ø–µ—Ä–≤—ã–π  —É–¥–∞–ª–∏–ª–ª—Å—è
        await request(app)
            .get(`${RouterPaths.blogs}`)
            .expect({
                ...basicPag,
                pagesCount: 1,
                totalCount: 1,
                items: [secondCreatedBlog]
            })

    });
    // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –±–ª–æ–≥
    it("should DELETE second blog with correct input data ", async () => {
        await request(app)
            .delete(`${RouterPaths.blogs}/${encodeURIComponent(secondCreatedBlog.id)}`)
            .auth('admin', 'qwerty')
            .expect(204)
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –ø—É—Å—Ç–∞—è
    it('should return 200 and empty []', async () => {
        await request(app)
            .get(RouterPaths.blogs)
            .expect(200, basicPag)
    })

    ///////////////////////////////////
    /* –ü—Ä–æ–≤–µ—Ä—è–µ–º query –∑–∞–ø—Ä–æ—Å—ã !!!ü•≤ */
    ///////////////////////////////////
});


